install.packages("ggplot2")
library(ggplot2)
search()
install.packages("slidify")
q()
find.package("devtools")
install.packages("devtools")
find(rtools)
find_rtools()
library(devtools)
find_rtools()
install.packages("devtools")
library(devtools)
find_rtools()
find.package(devtools)
find.package("devtools")
find_rtools()
library(devtools)
find_rtools()
z <- c(rep(1:20), -200, 400)
z
z <- c(1:20, 30, 40)
z
dim(z)
length(z)
rep(1:20)
add2 <- function(x,y){
x+y
}
formals(add2)
lm
formals(lm)
args(lm)
args(mean)
search()
search(mean)
mean
search()
source("quiz.R")
}
source("help_datatypes.R")
y <- 10
fn1 <- function(x){
y<-2
y^2 + g(x)
}
g <- function(x) {
x*y
}
class(fn1)
unclass(fn1)
fn1(3)
fn1(19)
y <- 10
y <- 10
fn1 <- function(x){
y<-2
y^2 + g(x)
}
g <- function(x) {
x*y
}
search()
args(fn1)
args(g)
cube <- function(x, n){
x^3
}
cube(3)
x <- 10
if (x > 5) {
x <- 0
}
x
x <- 1:10
if (x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x<-0
y<-0
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
lapply
args(lapply)
x <- list(a=1:10, b=rnorm(10))
x
lapply(x, mean)
runif
runif(1)
runif(1)
runif(2)
runif(3)
runif(1:3)
x <- 1:4
lapply(x, runif)
y <- lapply(x, runif)
y
y[[1]]
y[1]
y[[2]]
y[2]
y[[3]]
y$3
y[$3]
x <- list(a=matrix(1:4, 2,2 ), b=matrix(1:6, 3,2))
x$a
x$b
x
str
args(str)
str(apply)
apply()
apply
quantile
str(apply)
str(lapply)
gl(3,10)
available.packages()
install.packages("XLConnect")
install.packages("xlsx")
list.packages()
show.packages()
installed.pacakgeS()
library(xlsx)
library(XLConnect)
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre7')
library(rJava)
install.packages("rJava")
library(rJava)
library(xlsx)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages("markdown")
library(markdown)
install.packages("knitr")
library(knitr)
install.packages("slidify")
?png
?aggregate
ve1 <- c(5.1, 4.9, 4.7, 4.6, 5.0)
ve2 <- c(3.5, 3.0, 3.2, 3.1, 5.4)
ve1*ve2
4.6*3.1
?sd
var()
?var()
correlation <- sigma12/(sd1*sd2)
ve1 <- c(5.1, 4.9, 4.7, 4.6, 5.0)
ve2 <- c(3.5, 3.0, 3.2, 3.1, 5.4)
ve1.ve2 <- ve1*ve2
Ex1x2 <- mean(ve1.ve2)
mu1 <- mean(ve1)
mu2 <- mean(ve2)
sigma12 <- Ex1x2 - mu1*mu2
sd1 <- sd(ve1)
sd2 <- sd(ve2)
correlation <- sigma12/(sd1*sd2)
y <- rbind(ve1, ve2)
y
??transpose
aperm(y)
?cor()
cor(y)
getwd()
setwd("C:/Users/vasudevan/RepData_PeerAssessment1")
getwd()
