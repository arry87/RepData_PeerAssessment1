install.packages("ggplot2")
library(ggplot2)
search()
install.packages("slidify")
q()
find.package("devtools")
install.packages("devtools")
find(rtools)
find_rtools()
library(devtools)
find_rtools()
install.packages("devtools")
library(devtools)
find_rtools()
find.package(devtools)
find.package("devtools")
find_rtools()
library(devtools)
find_rtools()
z <- c(rep(1:20), -200, 400)
z
z <- c(1:20, 30, 40)
z
dim(z)
length(z)
rep(1:20)
add2 <- function(x,y){
x+y
}
formals(add2)
lm
formals(lm)
args(lm)
args(mean)
search()
search(mean)
mean
search()
source("quiz.R")
}
source("help_datatypes.R")
y <- 10
fn1 <- function(x){
y<-2
y^2 + g(x)
}
g <- function(x) {
x*y
}
class(fn1)
unclass(fn1)
fn1(3)
fn1(19)
y <- 10
y <- 10
fn1 <- function(x){
y<-2
y^2 + g(x)
}
g <- function(x) {
x*y
}
search()
args(fn1)
args(g)
cube <- function(x, n){
x^3
}
cube(3)
x <- 10
if (x > 5) {
x <- 0
}
x
x <- 1:10
if (x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x<-0
y<-0
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
lapply
args(lapply)
x <- list(a=1:10, b=rnorm(10))
x
lapply(x, mean)
runif
runif(1)
runif(1)
runif(2)
runif(3)
runif(1:3)
x <- 1:4
lapply(x, runif)
y <- lapply(x, runif)
y
y[[1]]
y[1]
y[[2]]
y[2]
y[[3]]
y$3
y[$3]
x <- list(a=matrix(1:4, 2,2 ), b=matrix(1:6, 3,2))
x$a
x$b
x
str
args(str)
str(apply)
apply()
apply
quantile
str(apply)
str(lapply)
gl(3,10)
available.packages()
install.packages("XLConnect")
install.packages("xlsx")
list.packages()
show.packages()
installed.pacakgeS()
library(xlsx)
library(XLConnect)
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre7')
library(rJava)
install.packages("rJava")
library(rJava)
library(xlsx)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages("markdown")
library(markdown)
install.packages("knitr")
library(knitr)
install.packages("slidify")
?png
getwd()
setwd("C:/Users/vasudevan/RepData_PeerAssessment1")
getwd()
source("Chumma.R")
source("Chumma.R")
length(Time)
Time
View(Data)
class(names(steps.per.interval))
source("Chumma.R")
Time
plot(Time, step.per.interval, type="l")
plot(Time, steps.per.interval, type="l")
which(max(steps.per.interval))
max(steps.per.interval)
which(steps.per.interval == max(steps.per.interval))
steps.per.interval[835]
steps.per.interval[104]
source("Chumma.R")
is.na(steps.per.interval)
steps.per.interval[835]
length(steps.per.interval)
y <- which(steps.per.interval == max(steps.per.interval))
y
max(steps.per.interval)
which(max(steps.per.interval))
names(max(steps.per.interval))
?max
steps.per.interval == max(steps.per.interval)
which(steps.per.interval == max(steps.per.interval))
y <- which(steps.per.interval == max(steps.per.interval))
y + 10
y + 440
y[1]
names(y)
Time[y]
ind <- which(steps.per.interval == max(steps.per.interval))
time_max <- names(steps.per.interval[ind])
time_max
time_max-5
names(Data2)
class(Data2$date)
y <- as.Date(Data2$date)
y
weekds <- weekdays(y)
length(weekds)
length(y)
?weekend
?weekends
y <- as.Data(Data$date)
y <- as.Date(Data$date)
length(y)
weekds <- weekdays(y)
length(weekds)
?weekdays
y[1]
weekdays(y[1])
weekdays(y[6])
weekdays(y[100])
weekdays(y[1000])
y <- as.Date(Data2$date)
inds <- which(weekdays(y)=="Saturday" | weekdays(y) == "Sunday")
length(inds)
inds
y <- c(1,2,3,4,5,6,7,8,9,10)
inds <- c(1,4,6)
inds
y[inds] <- 100
y
weekday.weekend <- vector("character", length(y))
weekday.weekend[inds] <- "weekend"
inds <- which(weekdays(y)!="Saturday" & weekdays(y) != "Sunday")
y <- as.Date(Data2$date)
inds <- which(weekdays(y)!="Saturday" & weekdays(y) != "Sunday")
weekday.weekend[inds] <- "weekday"
which(is.na(weekday.weekend))
weekday.weekend
y <- as.Date(Data2$date)
which(is.na(y))
source("chumma.R")
length(y)
inds.wkdays <- which(weekdays(y) == "Saturday" | weekdays(y) == "Sunday")
inds.wkends <- which(weekdays(y) != "Saturday" & weekdays(y) != "Sunday")
inds.wkdays+inds.wkends
length(y)
length(inds.wkdays)
length(inds.wkends)
4032+11232
y <- as.Date(Data2$date)
inds.wkends <- which(weekdays(y) == "Saturday" | weekdays(y) == "Sunday")
inds.wkdays <- which(weekdays(y) != "Saturday" & weekdays(y) != "Sunday")
daytype <- vector("character", length(y))
daytype[inds.wkdays] = "Weekdays"
daytype[inds.wkends] = "weekends"
which(is.na(daytype))
dayType <- data.frame(daytype = daytype)
cbind(Data2, datType)
Data2 <- cbind(Data2, dayType)
names(Data2)
class(daytype)
as.factor(Data2$daytype)
Data2$daytype <- as.factor(Data2$daytype)
names(Data2)
class(Data2$daytype)
Data2$daytype <- as.factor(Data2$daytype)
spData2 <- split(Data2, daytype)
mean.daytype <- sapply(spData2, mean)
Data2$daytype <- as.factor(Data2$daytype)
spData2 <- split(Data2$steps, Data2$daytype)
mean.daytype <- sapply(spData2, mean)
mean.daytype
summary(Data2$daytype)
str(Data2$datype)
str(Data2$daytype)
sum.daytype <- sapply(spData2, sum)
sum.daytype
class(spData2)
names(spData2)
class(spData2$weekdays)
class(spData2$Weekdays)
Data2$daytype <- as.factor(Data2$daytype)
spData3 <- split(Data2, Data2$daytype)
mean.daytype <- sapply(spData3$steps, mean)
mean.daytype
Data2$daytype <- as.factor(Data2$daytype)
spData3 <- split(Data2, Data2$daytype)
mean.daytype <- sapply(spData3, mean)
Data2$daytype <- as.factor(Data2$daytype)
spData3 <- split(Data2$steps, Data2$daytype)
mean.daytype <- sapply(spData3, mean)
mean.daytype
spData4 <- split(Data2, Data2$daytype)
## Weekdays
weekd <- spData4[[1]]
weeknd <- spData[[2]]
spData4 <- split(Data2, Data2$daytype)
## Weekdays
weekd <- spData4[[1]]
weeknd <- spData4[[2]]
class(weekd)
class(weeknd)
names(weeknd)
names(weekd)
weekd <- spData4[[1]]
spData5 <- split(weekd$steps, weekd$interval)
avg.wd.interval <- sapply(spData5, mean)
weeknd <- spData4[[2]]
spData6 <- split(weekd$steps, weeknd$interval)
avg.wnd.interval <- sapply(spData6, mean)
source("Chumma.R")
avg.wnd.interval
avg.wd.interval
plot(Time, avg.wd.interval, type = "l")
plot(Time, avg.wnd.interval, type = "l")
par(mfrow(2,1))
plot(Time, avg.wd.interval, type = "l")
plot(Time, avg.wnd.interval, type = "l")
par(mfrow = C(2,1))
plot(Time, avg.wd.interval, type = "l")
plot(Time, avg.wnd.interval, type = "l")
par(mfrow=c(2,1))
plot(Time, avg.wd.interval, type = "l")
plot(Time, avg.wnd.interval, type = "l")
i<- 15
i%10
i%%10
i <- 18
i%%10
j<-10
i%%j
length(Data$steps)%288
length(Data$steps)%%288
17568/288
length(Time)
for (i in 1:length(Data$steps))  {
if (is.na(Data$steps[i])) {
j <- length(Time)
index <- i%%j
Data$steps[i] <- steps.per.interval[index]
}
}
head(Data$steps, 10)
for (i in 1:length(Data$steps))  {
if (is.na(Data$steps[i])) {
j <- length(Time)
index <- i%%j
if (index != 0) {
Data$steps[i] <- steps.per.interval[index]
} else {
Data$steps[i] <- steps.per.interval[j]
}
}
}
which(is.na(Data$steps))
source("Chumma.R")
source("Chumma.R")
par(mfrow = c(2,1))
source("Chumma.R")
which(is.na(Data.V2$steps))
which(is.na(Data.V2$daytype))
which(is.na(Data.V2$date))
which(is.na(Data.V2$interval))
summary(Data)
hist(sum.of.steps.per.day)
?plot
library(stringr)
library(lubridate)
filename <- "activity/activity.csv"
Data <- read.csv(filename, header = TRUE)
y <- which(is.na(Data$interval))
y
y <- which(is.na(Data$date))
y
y <- which(is.na(Data$steps))
y
length(y)
?plot
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
source("Chumma.R")
max(avg.wd.interval)
max(avg.wd.interval)
source("Chumma.R")
source("Chumma.R")
